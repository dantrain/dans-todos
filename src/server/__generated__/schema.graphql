type AffectedRowsOutput {
  count: Int!
}

type Mutation {
  createOneTodo(text: String!): Todo!
  deleteManyCompletedTodo: AffectedRowsOutput!
  deleteOneTodo(id: ID!): Todo!
  updateManyTodo(completed: Boolean): AffectedRowsOutput!
  updateOneTodo(completed: Boolean, id: ID!, text: String): Todo!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  viewer: User!
}

type Todo implements Node {
  completed: Boolean!
  createdat: String!
  id: ID!
  text: String!
}

type User implements Node {
  id: ID!
  todos(after: String, before: String, first: Int, last: Int): UserTodosConnection!
}

type UserTodosConnection {
  edges: [UserTodosConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserTodosConnectionEdge {
  cursor: String!
  node: Todo!
}